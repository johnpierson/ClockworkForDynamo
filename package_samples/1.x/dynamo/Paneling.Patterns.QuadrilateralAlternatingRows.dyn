<Workspace Version="1.3.0.875" X="266.893438947283" Y="83.2343289752861" zoom="0.737991401105654" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Nodes.DSFaceSelection guid="0e0b305b-528c-4acd-b173-9101e2492aeb" type="Dynamo.Nodes.DSFaceSelection" nickname="Select Face" x="9.60452418096725" y="77.8377535101404" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="4a1a11ed-3826-4968-994b-d2e9874a928b-000077db:4:SURFACE" />
    </Dynamo.Nodes.DSFaceSelection>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="815f9177-44d8-4ab7-9284-e1cc21e8d147" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.FirstItem" x="327.861154446178" y="78.5834633385336" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.FirstItem@var[]..[]">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <CoreNodeModels.Input.IntegerSlider guid="c269478b-03f2-464f-846d-2ba3b9cb8d28" type="CoreNodeModels.Input.IntegerSlider" nickname="Integer Slider" x="9.60452418096725" y="187.974258970359" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Int32>9</System.Int32>
      <Range min="0" max="20" step="1" />
    </CoreNodeModels.Input.IntegerSlider>
    <CoreNodeModels.Input.IntegerSlider guid="c5367539-a76b-4093-a12b-0bc49de80e6e" type="CoreNodeModels.Input.IntegerSlider" nickname="Integer Slider" x="9.60452418096725" y="305.836193447738" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Int32>11</System.Int32>
      <Range min="0" max="20" step="1" />
    </CoreNodeModels.Input.IntegerSlider>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="c2082584-5f31-4fa5-b497-36ba977a224e" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Paneling.GridFromFace" x="481.698907956318" y="196" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <ID value="a276df2e-b669-4145-b656-cf75679a16a0" />
      <Name value="Paneling.GridFromFace" />
      <Description value="Returns UV coordinates, XYZ coordinates and normals for a face with UV subdivision" />
      <Inputs>
        <Input value="surface" />
        <Input value="U" />
        <Input value="V" />
      </Inputs>
      <Outputs>
        <Output value="Points" />
        <Output value="Normals" />
        <Output value="UVs" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <CoreNodeModels.Input.BoolSelector guid="ccb7d59c-766f-479a-85ee-010567370b50" type="CoreNodeModels.Input.BoolSelector" nickname="Boolean" x="9.60452418096725" y="425.836193447738" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Boolean>False</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
    <CoreNodeModels.Input.IntegerSlider guid="0055f913-0572-4613-a07b-e50b65508bc3" type="CoreNodeModels.Input.IntegerSlider" nickname="Integer Slider" x="9.60452418096725" y="510.883775351014" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Int32>0</System.Int32>
      <Range min="0" max="3" step="1" />
    </CoreNodeModels.Input.IntegerSlider>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="d1450712-1e87-4352-aacc-dce88d54744a" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="AdaptiveComponent.ByParametersOnFace" x="1407.69186845811" y="277.265188018841" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="RevitNodes.dll" function="Revit.Elements.AdaptiveComponent.ByParametersOnFace@double[][],Autodesk.DesignScript.Geometry.Surface,Revit.Elements.FamilyType">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <DSRevitNodesUI.FamilyTypes guid="70cb622b-2b38-4d85-93b1-d65ae90ce8a2" type="DSRevitNodesUI.FamilyTypes" nickname="Family Types" x="12.9436796947496" y="715.542797716805" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" index="2:4PointACByOffset_VarA:Type 1" />
    <CoreNodeModels.Watch guid="557a8cc7-cb5b-4e29-b6ff-75918a9e0d8f" type="CoreNodeModels.Watch" nickname="Watch" x="1017.14742926922" y="186.947066275803" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Watch>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="7ede5533-f48e-4f00-97d4-64e206d75990" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Paneling.QuadrilateralAlternatingRows" x="669.519192959333" y="397.695365449559" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <ID value="fd0407c5-5310-4948-8c47-1000933c7fda" />
      <Name value="Paneling.QuadrilateralAlternatingRows" />
      <Description value="Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in alternating rows. The placement pattern can be reversed (boolean) and shifted (integer)." />
      <Inputs>
        <Input value="seq" />
        <Input value="V" />
        <Input value="reverse" />
        <Input value="shiftPlacement" />
        <Input value="rotateGridBy90Degrees" />
      </Inputs>
      <Outputs>
        <Output value="oddRows" />
        <Output value="evenRows" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <CoreNodeModels.Input.BoolSelector guid="9314cccc-07a0-4fe3-a357-3b0530ed1968" type="CoreNodeModels.Input.BoolSelector" nickname="Boolean" x="12.0052932702889" y="627.298576112599" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Boolean>False</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="92843ad0-fdff-451a-b478-939d78e5be31" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="AdaptiveComponent.ByParametersOnFace" x="1401.86517920898" y="733.7146171638" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="RevitNodes.dll" function="Revit.Elements.AdaptiveComponent.ByParametersOnFace@double[][],Autodesk.DesignScript.Geometry.Surface,Revit.Elements.FamilyType">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <CoreNodeModels.Watch guid="3d09aa2d-3ce2-4150-8921-16fe56330968" type="CoreNodeModels.Watch" nickname="Watch" x="1016.74085737377" y="590.550351222374" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Watch>
    <DSRevitNodesUI.FamilyTypes guid="598b02f8-60ae-4a39-9ceb-1ca6ca89ba60" type="DSRevitNodesUI.FamilyTypes" nickname="Family Types" x="10.5057920610049" y="799.554616698858" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" index="3:4PointACByOffset_VarA:Type 2" />
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="0e0b305b-528c-4acd-b173-9101e2492aeb" start_index="0" end="815f9177-44d8-4ab7-9284-e1cc21e8d147" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="815f9177-44d8-4ab7-9284-e1cc21e8d147" start_index="0" end="c2082584-5f31-4fa5-b497-36ba977a224e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="815f9177-44d8-4ab7-9284-e1cc21e8d147" start_index="0" end="d1450712-1e87-4352-aacc-dce88d54744a" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="815f9177-44d8-4ab7-9284-e1cc21e8d147" start_index="0" end="92843ad0-fdff-451a-b478-939d78e5be31" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c269478b-03f2-464f-846d-2ba3b9cb8d28" start_index="0" end="c2082584-5f31-4fa5-b497-36ba977a224e" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c5367539-a76b-4093-a12b-0bc49de80e6e" start_index="0" end="c2082584-5f31-4fa5-b497-36ba977a224e" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c5367539-a76b-4093-a12b-0bc49de80e6e" start_index="0" end="7ede5533-f48e-4f00-97d4-64e206d75990" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c2082584-5f31-4fa5-b497-36ba977a224e" start_index="2" end="7ede5533-f48e-4f00-97d4-64e206d75990" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ccb7d59c-766f-479a-85ee-010567370b50" start_index="0" end="7ede5533-f48e-4f00-97d4-64e206d75990" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0055f913-0572-4613-a07b-e50b65508bc3" start_index="0" end="7ede5533-f48e-4f00-97d4-64e206d75990" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="70cb622b-2b38-4d85-93b1-d65ae90ce8a2" start_index="0" end="d1450712-1e87-4352-aacc-dce88d54744a" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="557a8cc7-cb5b-4e29-b6ff-75918a9e0d8f" start_index="0" end="d1450712-1e87-4352-aacc-dce88d54744a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7ede5533-f48e-4f00-97d4-64e206d75990" start_index="0" end="557a8cc7-cb5b-4e29-b6ff-75918a9e0d8f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7ede5533-f48e-4f00-97d4-64e206d75990" start_index="1" end="3d09aa2d-3ce2-4150-8921-16fe56330968" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9314cccc-07a0-4fe3-a357-3b0530ed1968" start_index="0" end="7ede5533-f48e-4f00-97d4-64e206d75990" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3d09aa2d-3ce2-4150-8921-16fe56330968" start_index="0" end="92843ad0-fdff-451a-b478-939d78e5be31" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="598b02f8-60ae-4a39-9ceb-1ca6ca89ba60" start_index="0" end="92843ad0-fdff-451a-b478-939d78e5be31" end_index="2" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="d7bd88c5-f00e-4015-b0ce-d46c76f74f70" text="Run this graph on the Paneling_Sample model in the extra folder." x="9.60452418096725" y="14.7815912636507" />
  </Notes>
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Hintergrundvorschau" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
  <SessionTraceData>
    <NodeTraceData NodeId="d1450712-1e87-4352-aacc-dce88d54744a">
      <CallsiteTraceData CallSiteID="ByParametersOnFace_InClassDecl-1_InFunctionScope-1_Instance0_d1450712-1e87-4352-aacc-dce88d54744a"></CallsiteTraceData>
    </NodeTraceData>
    <NodeTraceData NodeId="92843ad0-fdff-451a-b478-939d78e5be31">
      <CallsiteTraceData CallSiteID="ByParametersOnFace_InClassDecl-1_InFunctionScope-1_Instance0_92843ad0-fdff-451a-b478-939d78e5be31"></CallsiteTraceData>
    </NodeTraceData>
  </SessionTraceData>
</Workspace>